/* Copyright 2012 Ephisys Inc.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
   limitations under the License.
*/
using System;
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using System.Runtime.Serialization.Formatters.Binary;
using System.IO;
using MongoDB.Bson.Serialization;
using MongoDB.Bson.Serialization.IdGenerators;

namespace Mongol {
	/// <summary>
	/// Suitable class from which sub-classes can inherit to represent a business entity (a single document in a MongoDB collection).  Provides automatic string-based Id's with associated ObjectId generator, 
	/// equality comparison based upon Id matching, and GetHashCode() implementation.
	/// </summary>
	public abstract class Record {
		/// <summary>
		/// The Id of the record.  Should uniquely identify the record within a collection.  If unset, will be autogenerated on save.
		/// </summary>
		[BsonId(IdGenerator = typeof(StringObjectIdGenerator))]
		public virtual string Id {
			get;
			set;
		}

		/// <summary>
		/// Considers two records are equal if and only if they have equal, non-null id's.
		/// </summary>
		/// <param name="obj"></param>
		/// <returns></returns>
		public override bool Equals(object obj) {
			Record other = obj as Record;
			// Check if null, or not convertible to record.
			if (other == null) {
				return false;
			}
			//Check if same type
			if (other.GetType() != GetType()) {
				return false;
			}
			// Now check for ID Match.  If null Ids, can't compare (two transient objects) without comparing each property.
			return this.Id != null && (other.Id == this.Id);
		}

		/// <summary>
		/// Uses the Hashcode of the Id if it's present, otherwise calls base.GetHashCode()
		/// </summary>
		/// <returns></returns>
		public override int GetHashCode() {
			if (Id == null) {
				return base.GetHashCode();
			}
			else {
				return Id.GetHashCode();
			}
		}

		/// <summary>
		/// Combines the ClassName and Id of the Record
		/// </summary>
		/// <returns></returns>
		public override string ToString() {
			return String.Format("{0}:{1}", GetType().Name, Id);
		}
	}
}