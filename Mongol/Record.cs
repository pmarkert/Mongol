using System;
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using System.Runtime.Serialization.Formatters.Binary;
using System.IO;
using MongoDB.Bson.Serialization;
using MongoDB.Bson.Serialization.IdGenerators;

namespace Mongol {
	/// <summary>
	/// Base class from which all record entities must inherit.
	/// </summary>
	public abstract class Record {
		/// <summary>
		/// The Id of the record.  Should uniquely identify the record within a collection.  If unset, will be autogenerated on save.
		/// </summary>
		[BsonId(IdGenerator = typeof(StringObjectIdGenerator))]
		public virtual string Id {
			get;
			set;
		}

		/// <summary>
		/// For this implementation, two records are equal if they have non-null id's that are equal.
		/// </summary>
		/// <param name="obj"></param>
		/// <returns></returns>
		public override bool Equals(object obj) {
			Record other = obj as Record;
			// Check if null, or not convertible to record.
			if (other == null) {
				return false;
			}
			//Check if same type
			if (other.GetType() != GetType()) {
				return false;
			}
			// Now check for ID Match.  If null Ids, can't compare (two transient objects) without comparing each property.
			return this.Id != null && (other.Id == this.Id);
		}

		/// <summary>
		/// Uses the Hashcode of the Id if it's present, otherwise calls base.GetHashCode()
		/// </summary>
		/// <returns></returns>
		public override int GetHashCode() {
			if (Id == null) {
				return base.GetHashCode();
			}
			else {
				return Id.GetHashCode();
			}
		}

		/// <summary>
		/// Combines the ClassName and Id of the Record
		/// </summary>
		/// <returns></returns>
		public override string ToString() {
			return String.Format("{0}:{1}", GetType().Name, Id);
		}
	}
}